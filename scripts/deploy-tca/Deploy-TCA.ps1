function Deploy-TCA{
    <#
    .SYNOPSIS
    This PowerCLI cmdlet create a PowerCli object OvfConfiguration specifically designed to be used when importing the VMware-Telco-Cloud-Automation-2.1.0-20142564 ovf/ova package with the Import-VApp cmdlet.
    It relies on the get-ovfconfiguration PowerCli cmdlet
    
    .DESCRIPTION
    This function is based on the original get-ovfconfiguration PowerCLI cmdlet...
    ...and convert it in a Powershell friendly function specifically for the package VMware-Telco-Cloud-Automation-2.1.0-20142564
    It is mandatory to be connected to one vCenter or Get-OvfConfiguration will throw an error
    
    .NOTES
    Author: Christophe Calvet
    Blog: http://www.thecrazyconsultant.com/Get-OvfConfiguration_on_steroids
    
    .LINK
    This function has been generated by script for a VMware-Telco-Cloud-Automation-2.1.0-20142564 ovf/ova package.
    The script used to create this function is available at the link below, and can be used for any ovf/ova packages.
    http://www.thecrazyconsultant.com/Get-OvfConfiguration_on_steroids
    Documentation for the original get-ovfconfiguration
    http://pubs.vmware.com/vsphere-55/index.jsp#com.vmware.powercli.cmdletref.doc/Get-OvfConfiguration.html
    Link for a good overview of get-ovfconfiguration
    http://blogs.vmware.com/PowerCLI/2014/09/powercli-5-8-new-feature-get-ovfconfiguration-part-1-2.html
    
    .PARAMETER Common_applianceRole
    OvfTypeDescription: string["Manager", "ControlPlane","Bootstrapper"]
    Configure Appliance Role
    
    .PARAMETER Common_hostname
    OvfTypeDescription: string
    The hostname for this VM.
    
    .PARAMETER Common_mgr_cli_passwd
    OvfTypeDescription: password
    The password for default CLI user for this VM.
    
    .PARAMETER Common_mgr_dns_list
    OvfTypeDescription: string
    The DNS server list(space separated) for this VM.
    
    .PARAMETER Common_mgr_domain_search_list
    OvfTypeDescription: string
    The domain Search list(space separated) for this VM.
    
    .PARAMETER Common_mgr_gateway_0
    OvfTypeDescription: string
    The default gateway for this appliance.
    
    .PARAMETER Common_mgr_ip_0
    OvfTypeDescription: string
    The IP Address for this interface.
    
    .PARAMETER Common_mgr_ip_protocol
    OvfTypeDescription: string["IPv4", "IPv6"]
    Select IP protocol to be used for the appliance.
    
    .PARAMETER Common_mgr_isSSHEnabled
    OvfTypeDescription: boolean
    Enabling SSH service is not recommended for security reasons.
    
    .PARAMETER Common_mgr_is_dhcp_enabled
    OvfTypeDescription: boolean
    Configure DHCP for the appliance. If DHCP is enabled, IP Address, Prefix Length and Gateway will be ignored.
    
    .PARAMETER Common_mgr_ntp_list
    OvfTypeDescription: string
    The NTP server list(space separated) for this VM.
    
    .PARAMETER Common_mgr_prefix_ip_0
    OvfTypeDescription: string(..3)
    The IP Prefix Length for this interface.
    
    .PARAMETER Common_mgr_root_passwd
    OvfTypeDescription: password
    The password for root user.
    
    .PARAMETER Common_mgr_static_gateway_ip_1
    OvfTypeDescription: string
    The Default Gateway’s IP Address 1
    
    .PARAMETER Common_mgr_static_gateway_ip_2
    OvfTypeDescription: string
    The Default Gateway’s IP Address 2
    
    .PARAMETER Common_mgr_static_network_1
    OvfTypeDescription: string
    The Static Route 1 Network
    
    .PARAMETER Common_mgr_static_network_2
    OvfTypeDescription: string
    The Static Route 2 Network
    
    .PARAMETER Common_mgr_static_network_prefix_1
    OvfTypeDescription: string(..2)
    The Static Route 1 Prefix Length
    
    .PARAMETER Common_mgr_static_network_prefix_2
    OvfTypeDescription: string(..2)
    The Static Route 2 Prefix Length
    
    .PARAMETER NetworkMapping_VSMgmt
    OvfTypeDescription: string
    This network provides connectivity to this virtual machine.
    Option 1: Standard Port Group associated to one host - VirtualPortGroupImpl
    Option 2: Distributed Port Group associated to vCenter - VmwareVDPortgroupImpl
    
    .PARAMETER ovfpath
    Specifies the local path to the OVF or OVA package for which the user-configurable options are returned. URL paths are not supported.
    #>
    [cmdletbinding()]
    param(
      [Parameter(Mandatory = $true)]
      [string]$JSONPath
    )
  
    function Set-OvfParameters {
        param (
            $params
        )    
    
      
        process{
            $OvfConfiguration = Get-OvfConfiguration -Ovf $params.vSphere.ovapath
    
        if($Common_applianceRole){
        $OvfConfiguration.Common.applianceRole.Value = $params.common.applianceRole
        }
        if($Common_hostname){
        $OvfConfiguration.Common.hostname.Value = $params.common.hostname
        }
        if($Common_mgr_cli_passwd){
        $OvfConfiguration.Common.mgr_cli_passwd.Value = $params.common.mgr_cli_passwd
        }
        if($Common_mgr_dns_list){
        $OvfConfiguration.Common.mgr_dns_list.Value = $params.network.dnsservers
        }
        if($Common_mgr_domain_search_list){
        $OvfConfiguration.Common.mgr_domain_search_list.Value = $params.network.searchpath
        }
        if($Common_mgr_gateway_0){
        $OvfConfiguration.Common.mgr_gateway_0.Value = $params.network.gateway
        }
        if($Common_mgr_ip_0){
        $OvfConfiguration.Common.mgr_ip_0.Value = $params.network.ipaddress
        }
        if($Common_mgr_ip_protocol){
        $OvfConfiguration.Common.mgr_ip_protocol.Value = $params.network.ipprotocol
        }
        if($Common_mgr_isSSHEnabled){
        $OvfConfiguration.Common.mgr_isSSHEnabled.Value = $params.common.ssh_enabled
        }
        if($Common_mgr_is_dhcp_enabled){
        $OvfConfiguration.Common.mgr_is_dhcp_enabled.Value = $params.network.dhcp_enabled
        }
        if($Common_mgr_ntp_list){
        $OvfConfiguration.Common.mgr_ntp_list.Value = $params.network.ntpservers
        }
        if($Common_mgr_prefix_ip_0){
        $OvfConfiguration.Common.mgr_prefix_ip_0.Value = $params.network.prefix
        }
        if($Common_mgr_root_passwd){
        $OvfConfiguration.Common.mgr_root_passwd.Value = $params.common.root_password
        }
        if($Common_mgr_static_gateway_ip_1){
        $OvfConfiguration.Common.mgr_static_gateway_ip_1.Value = $params.routes.staticNet1.gatewayIp
        }
        if($Common_mgr_static_gateway_ip_2){
        $OvfConfiguration.Common.mgr_static_gateway_ip_2.Value = $params.routes.staticNet2.gatewayIp
        }
        if($Common_mgr_static_network_1){
        $OvfConfiguration.Common.mgr_static_network_1.Value = $params.routes.staticNet1.network
        }
        if($Common_mgr_static_network_2){
        $OvfConfiguration.Common.mgr_static_network_2.Value = $params.routes.staticNet2.network
        }
        if($Common_mgr_static_network_prefix_1){
        $OvfConfiguration.Common.mgr_static_network_prefix_1.Value = $params.routes.staticNet1.networkPrefix
        }
        if($Common_mgr_static_network_prefix_2){
        $OvfConfiguration.Common.mgr_static_network_prefix_2.Value = $params.routes.staticNet2.networkPrefix
        }
        if($NetworkMapping_VSMgmt){
        $OvfConfiguration.NetworkMapping.VSMgmt.Value = $params.network.portgroup
        }
    
        Return $OvfConfiguration
        }
    }
    
      # Get Parameters
     
      $paramDataJSON = Get-Content -Path $JSONPath | Out-String
      $paramData = ConvertFrom-Json -InputObject $paramDataJSON
    
      # Determine location for appliance
     
      $obj = Get-Inventory -Name $paramData.vSphere.VMHost
      if ($obj -is [VMware.VimAutomation.ViCore.Types.V1.Inventory.Cluster]) {
        $obj = Get-VMHost -Location $obj | Get-Random
      }
      $esx = $obj
     
      $dsc = Get-DatastoreCluster -Name $paramData.vSphere.Datastore -ErrorAction SilentlyContinue
      if ($dsc) {
        $ds = Get-Datastore -RelatedObject $dsc | Get-Random
      }
      else {
        $ds = Get-Datastore -Name $paramData.vSphere.Datastore
      }
    
      # Set OVF parameters
    
      $ovfParam = Set-OvfParameters($paramData)
    
        # Import Appliance
     
      $sVApp = @{
        Name              = $paramData.VM.VMName
        Source            = $paramData.vSphere.OvaPath
        OvfConfiguration  = $ovfParam
        VMHost            = $esx
        Datastore         = $ds
        DiskStorageFormat = [VMware.VimAutomation.ViCore.Types.V1.VirtualDevice.VirtualDiskStorageFormat]::Thin
        Confirm           = $false
      }
      if($paramData.Template.Folder){
        $sVApp.Add('InventoryLocation',(Get-FolderByPath -Path $paramData.Template.Folder))
      }
      $vm = Import-VApp @sVApp
    
      $vm = Get-VM -Name $paramData.VM.VMName
    
      Start-VM $vm
    }